{"version":3,"sources":["basicData/index.js","App.js","serviceWorker.js","index.js"],"names":["BasicData","props","handleFatherInputChange","event","setState","fatherBirthday","target","value","handleMotherInputChange","motherBirthday","handleConceptionInputChange","conceptionDate","handleInputData","preventDefault","show","handleBloodChange","yearFather","state","slice","conceptYear","yearMother","monthFaher","monthMother","monthConcept","className","for","type","id","name","this","onChange","onClick","style","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMA8GeA,E,kDA3Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,wBAA0B,SAACC,GACzB,EAAKC,SAAS,CACZC,eAAgBF,EAAMG,OAAOC,SAXd,EAenBC,wBAA0B,SAACL,GACzB,EAAKC,SAAS,CACZK,eAAgBN,EAAMG,OAAOC,SAjBd,EAqBnBG,4BAA8B,SAACP,GAC7B,EAAKC,SAAS,CACZO,eAAgBR,EAAMG,OAAOC,SAvBd,EA2BnBK,gBAAkB,SAACT,GACjBA,EAAMU,iBACN,EAAKT,SAAS,CAAEU,MAAM,KA7BL,EAgCnBC,kBAAoB,WAClB,IAAIC,EAAa,EAAKC,MAAMZ,eAAea,MAAM,EAAG,GAChDC,EAAc,EAAKF,MAAMN,eAAeO,MAAM,EAAG,GACjDE,EAAa,EAAKH,MAAMR,eAAeS,MAAM,EAAG,GAChDG,EAAa,EAAKJ,MAAMZ,eAAea,MAAM,EAAG,GAChDI,EAAc,EAAKL,MAAMR,eAAeS,MAAM,EAAG,GACjDK,EAAe,EAAKN,MAAMN,eAAeO,MAAM,EAAG,GACtD,OACIC,EAAcH,GAAcO,EAAeF,GAAc,IAAM,GAC7DF,EAAcC,GAAcG,EAAeD,GAAe,IAAM,EACpE,EAEO,6CAEF,8CA5CP,EAAKL,MAAQ,CACXZ,eAAgB,GAChBI,eAAgB,GAChBE,eAAgB,GAChBG,MAAM,GANS,E,qDAkDjB,OACE,kBAAC,WAAD,KACE,yBAAKU,UAAU,YACb,6FACA,8BACE,2BAAOC,IAAI,WACT,0GAEF,uDACQ,IACN,2BACEC,KAAK,OACLC,GAAG,iBACHC,KAAK,WACLrB,MAAOsB,KAAKZ,MAAMZ,eAClByB,SAAUD,KAAK3B,2BAGnB,uDACQ,IACN,2BACEwB,KAAK,OACLC,GAAG,iBACHC,KAAK,WACLrB,MAAOsB,KAAKZ,MAAMR,eAClBqB,SAAUD,KAAKrB,2BAGnB,yEACW,IACT,2BACEkB,KAAK,OACLC,GAAG,iBACHC,KAAK,WACLrB,MAAOsB,KAAKZ,MAAMN,eAClBmB,SAAUD,KAAKnB,+BAGnB,4BAAQgB,KAAK,SAASK,QAASF,KAAKjB,iBAApC,2DAIDiB,KAAKZ,MAAMH,KACkB,8CAA5Be,KAAKd,oBACH,wBAAIiB,MAAO,CAAEC,MAAO,QAApB,8CAEA,wBAAID,MAAO,CAAEC,MAAO,SAApB,8CAGF,S,GApGYC,aCSTC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCMcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47289f00.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport styles from \"../index.css\";\r\nclass BasicData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fatherBirthday: \"\",\r\n      motherBirthday: \"\",\r\n      conceptionDate: \"\",\r\n      show: false,\r\n    };\r\n  }\r\n  handleFatherInputChange = (event) => {\r\n    this.setState({\r\n      fatherBirthday: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleMotherInputChange = (event) => {\r\n    this.setState({\r\n      motherBirthday: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleConceptionInputChange = (event) => {\r\n    this.setState({\r\n      conceptionDate: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleInputData = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ show: true });\r\n  };\r\n\r\n  handleBloodChange = () => {\r\n    let yearFather = this.state.fatherBirthday.slice(0, 4);\r\n    let conceptYear = this.state.conceptionDate.slice(0, 4);\r\n    let yearMother = this.state.motherBirthday.slice(0, 4);\r\n    let monthFaher = this.state.fatherBirthday.slice(5, 7);\r\n    let monthMother = this.state.motherBirthday.slice(5, 7);\r\n    let monthConcept = this.state.conceptionDate.slice(5, 7);\r\n    if (\r\n      ((conceptYear - yearFather + (monthConcept - monthFaher) / 12) % 4) -\r\n        ((conceptYear - yearMother + (monthConcept - monthMother) / 12) % 3) <\r\n      0\r\n    ) {\r\n      return \"Мальчик\";\r\n    }\r\n    return \"Девочка\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"fragment\">\r\n          <h2>Пол ребенка</h2>\r\n          <form>\r\n            <labeL for=\"Bithday\">\r\n              <h3>Дата рождения</h3>\r\n            </labeL>\r\n            <p>\r\n              Папа:{\" \"}\r\n              <input\r\n                type=\"date\"\r\n                id=\"fatherBirthday\"\r\n                name=\"Birthday\"\r\n                value={this.state.fatherBirthday}\r\n                onChange={this.handleFatherInputChange}\r\n              ></input>\r\n            </p>\r\n            <p>\r\n              Мама:{\" \"}\r\n              <input\r\n                type=\"date\"\r\n                id=\"motherBirthday\"\r\n                name=\"Birthday\"\r\n                value={this.state.motherBirthday}\r\n                onChange={this.handleMotherInputChange}\r\n              ></input>\r\n            </p>\r\n            <p>\r\n              Зачатие:{\" \"}\r\n              <input\r\n                type=\"date\"\r\n                id=\"conceptionDate\"\r\n                name=\"Birthday\"\r\n                value={this.state.conceptionDate}\r\n                onChange={this.handleConceptionInputChange}\r\n              ></input>\r\n            </p>\r\n            <button type=\"submit\" onClick={this.handleInputData}>\r\n              Отправить\r\n            </button>\r\n          </form>\r\n          {this.state.show ? (\r\n            this.handleBloodChange() == \"Девочка\" ? (\r\n              <h1 style={{ color: \"red\" }}>Девочка</h1>\r\n            ) : (\r\n              <h1 style={{ color: \"blue\" }}>Мальчик</h1>\r\n            )\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BasicData;\r\n","import React from \"react\";\nimport BasicData from \"./basicData\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BasicData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}